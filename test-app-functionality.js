// Script de test rapide pour v√©rifier que l'application fonctionne
// Ex√©cutez avec: node test-app-functionality.js

import { readFileSync, existsSync } from 'fs';
import { join } from 'path';

console.log('üß™ Test de fonctionnalit√© de l\'application Nzoo Immo\n');

// V√©rifier que les fichiers principaux existent
const requiredFiles = [
    'src/App.tsx',
    'src/pages/DashboardPage.tsx',
    'src/components/Dashboard/HostDashboard.tsx',
    'src/components/Dashboard/AdminDashboard.tsx',
    'src/components/Dashboard/TravelerDashboard.tsx',
    'src/components/Dashboard/ProviderDashboard.tsx',
    'src/components/Notifications/NotificationSystem.tsx',
    'src/components/Analytics/AnalyticsDashboard.tsx',
    'src/pages/AnalyticsPage.tsx'
];

console.log('üìÅ V√©rification des fichiers...');
let allFilesExist = true;

requiredFiles.forEach(file => {
    if (existsSync(file)) {
        console.log(`‚úÖ ${file}`);
    } else {
        console.log(`‚ùå ${file} - MANQUANT`);
        allFilesExist = false;
    }
});

// V√©rifier que les composants importent correctement
console.log('\nüîç V√©rification des imports...');

try {
    const appContent = readFileSync('src/App.tsx', 'utf8');
    
    // V√©rifier les imports des pages
    const requiredImports = [
        'DashboardPage',
        'PropertyManagementPage',
        'ReservationManagementPage',
        'MessagingPage',
        'ReviewsPage',
        'AnalyticsPage'
    ];
    
    requiredImports.forEach(importName => {
        if (appContent.includes(importName)) {
            console.log(`‚úÖ Import ${importName}`);
        } else {
            console.log(`‚ùå Import ${importName} - MANQUANT`);
            allFilesExist = false;
        }
    });
    
    // V√©rifier les routes
    const requiredRoutes = [
        '/dashboard',
        '/properties',
        '/reservations',
        '/messaging',
        '/reviews',
        '/analytics'
    ];
    
    console.log('\nüõ£Ô∏è V√©rification des routes...');
    requiredRoutes.forEach(route => {
        if (appContent.includes(`path="${route}"`)) {
            console.log(`‚úÖ Route ${route}`);
        } else {
            console.log(`‚ùå Route ${route} - MANQUANT`);
            allFilesExist = false;
        }
    });
    
} catch (error) {
    console.log(`‚ùå Erreur lors de la lecture d'App.tsx: ${error.message}`);
    allFilesExist = false;
}

// V√©rifier les composants de tableau de bord
console.log('\nüìä V√©rification des composants de tableau de bord...');

const dashboardComponents = [
    'src/components/Dashboard/HostDashboard.tsx',
    'src/components/Dashboard/AdminDashboard.tsx',
    'src/components/Dashboard/TravelerDashboard.tsx',
    'src/components/Dashboard/ProviderDashboard.tsx'
];

dashboardComponents.forEach(component => {
    if (existsSync(component)) {
        try {
            const content = readFileSync(component, 'utf8');
            if (content.includes('export default')) {
                console.log(`‚úÖ ${component} - Export√© correctement`);
            } else {
                console.log(`‚ùå ${component} - Pas d'export par d√©faut`);
                allFilesExist = false;
            }
        } catch (error) {
            console.log(`‚ùå ${component} - Erreur de lecture`);
            allFilesExist = false;
        }
    }
});

// V√©rifier le syst√®me de notifications
console.log('\nüîî V√©rification du syst√®me de notifications...');

if (existsSync('src/components/Notifications/NotificationSystem.tsx')) {
    try {
        const content = readFileSync('src/components/Notifications/NotificationSystem.tsx', 'utf8');
        if (content.includes('export default')) {
            console.log('‚úÖ NotificationSystem - Export√© correctement');
        } else {
            console.log('‚ùå NotificationSystem - Pas d\'export par d√©faut');
            allFilesExist = false;
        }
    } catch (error) {
        console.log('‚ùå NotificationSystem - Erreur de lecture');
        allFilesExist = false;
    }
} else {
    console.log('‚ùå NotificationSystem - Fichier manquant');
    allFilesExist = false;
}

// V√©rifier les analytics
console.log('\nüìà V√©rification des analytics...');

if (existsSync('src/components/Analytics/AnalyticsDashboard.tsx')) {
    try {
        const content = readFileSync('src/components/Analytics/AnalyticsDashboard.tsx', 'utf8');
        if (content.includes('export default')) {
            console.log('‚úÖ AnalyticsDashboard - Export√© correctement');
        } else {
            console.log('‚ùå AnalyticsDashboard - Pas d\'export par d√©faut');
            allFilesExist = false;
        }
    } catch (error) {
        console.log('‚ùå AnalyticsDashboard - Erreur de lecture');
        allFilesExist = false;
    }
} else {
    console.log('‚ùå AnalyticsDashboard - Fichier manquant');
    allFilesExist = false;
}

// R√©sum√©
console.log('\nüìã R√âSUM√â DU TEST');
console.log('==================');

if (allFilesExist) {
    console.log('‚úÖ Tous les fichiers et composants sont pr√©sents');
    console.log('‚úÖ L\'application devrait fonctionner correctement');
    console.log('\nüéØ PROCHAINES √âTAPES:');
    console.log('1. Ex√©cutez le script test-accounts-simple.sql dans Supabase');
    console.log('2. V√©rifiez avec verify-test-data.sql');
    console.log('3. Testez l\'application avec les comptes de test');
    console.log('4. Explorez tous les tableaux de bord sp√©cialis√©s');
} else {
    console.log('‚ùå Certains fichiers ou composants sont manquants');
    console.log('‚ùå L\'application pourrait ne pas fonctionner correctement');
    console.log('\nüîß ACTIONS REQUISES:');
    console.log('1. V√©rifiez que tous les fichiers ont √©t√© cr√©√©s');
    console.log('2. Relancez la cr√©ation des composants manquants');
    console.log('3. V√©rifiez les imports et exports');
}

console.log('\nüöÄ Pour d√©marrer l\'application:');
console.log('npm run dev');
console.log('\nüìö Pour plus d\'informations, consultez TEST_ACCOUNTS_GUIDE.md');
